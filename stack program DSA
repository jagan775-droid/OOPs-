#include <stdio.h>
#include <stdlib.h>

#define CAPACITY 5

int stack[CAPACITY];
int top = -1;  // Initialize top to -1 for an zeroeth pos in stack

int isfull() 
{
    if(top==CAPACITY-1)
        {
            return 1;
        }
        else
        {
            return 0;
        }
}

int isempty() 
{
        if(top==-1)
        {
            return 1;
        }
        else
        {
            return 0;
        }
}

void push(int item) {
    if (isfull()) {
        printf("Stack overflow\n");
    } else {
        top++;
        stack[top] = item;
        printf("Element %d pushed\n", item);
    }
}

int pop() {
    if (isempty()) {
        printf("Stack underflow\n");
        return -1; // Indicate error or a special value
    } else {
        int item = stack[top];
        top--;
        return item;
    }
}

int peek() {
    if (isempty()) {
        printf("Stack is empty\n");
        return -1; // Indicate error or a special value
    } else {
        return stack[top];
    }
}

int traverse() {
    if (isempty()) {
        printf("Stack is empty\n");
        return 0; // Indicate aint returning anything
    } 
    else 
    {
        printf("Stack elements:\n");
        for (int i = top; i >= 0; i--) {
            printf("%d\n", stack[i]);
        }
        return 1; // Indicate successful traversal
    }
}





int main() {
    int choice, item;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek\n");
        printf("4. Traverse\n");
        printf("5. Exit\n");

        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to push: ");
                scanf("%d", &item);
                push(item);
                break;

            case 2:
                item = pop();
                if (item != -1) {  // Checking  for error returned by pop()
                    printf("Popped item: %d\n", item);
                }
                break;

            case 3:
                item = peek();
                if (item != -1) {  // Checking for error returned by peek()
                    printf("Top element: %d\n", item);
                }
                break;

            case 4:
                traverse();
                break;

            case 5:
                exit(0);

            default:
                printf("Invalid choice\n");
        }
    }

    return 0; // Not strictly necessary, but good practice
    // or you can simply use voidduu main
}
